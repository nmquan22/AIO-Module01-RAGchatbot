# app/rag_chain.py

from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain.prompts import PromptTemplate
from app.llm_pipeline import llm
from app.vectorstore import get_retriever

# === Prompt cho LLM ===
prompt = PromptTemplate(
    input_variables=["context", "question"],
    template="""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI hi·ªÉu ti·∫øng Vi·ªát, c√≥ nhi·ªám v·ª• tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p b√™n d∆∞·ªõi.

### Ng·ªØ c·∫£nh:
{context}

### C√¢u h·ªèi:
{question}

### Tr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c v√† s√∫c t√≠ch, s·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n:
"""
)

# === Format context ===
def format_docs(docs):
    context = "\n\n".join(doc.page_content for doc in docs)[:4000]
    print("üßæ Formatted Context:\n", context)
    return context

# === H√†m build RAG chain ƒë·ªông theo user ===
def build_rag_chain(user_id: str):
    retriever = get_retriever(user_id)
    
    return (
        {"context": retriever | format_docs, "question": RunnablePassthrough()}
        | prompt
        | llm
        | StrOutputParser()
    )
